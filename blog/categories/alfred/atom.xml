<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Alfred | I'm Viecks]]></title>
  <link href="http://viecks.info/blog/categories/alfred/atom.xml" rel="self"/>
  <link href="http://viecks.info/"/>
  <updated>2014-08-21T11:34:27+08:00</updated>
  <id>http://viecks.info/</id>
  <author>
    <name><![CDATA[viecks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[简化静态博客发图的Alfred工作流]]></title>
    <link href="http://viecks.info/blog/2014/05/13/jian-hua-jing-tai-bo-ke-fa-tu-de-alfredgong-zuo-liu/"/>
    <updated>2014-05-13T19:16:40+08:00</updated>
    <id>http://viecks.info/blog/2014/05/13/jian-hua-jing-tai-bo-ke-fa-tu-de-alfredgong-zuo-liu</id>
    <content type="html"><![CDATA[<p>今天把自己的blog迁到了github上，为了解决图片加载慢的问题又用了qiniudn做图床加速。没想到用力太猛，贴图比之前更麻烦了。。。没办法，用Alfred写了个Workflow，一劳永逸的解决贴图的问题吧……</p>

<!--more-->

<p>使用octopress写文章，贴图的常见流程是：</p>

<ol>
  <li>随便找个工具或者用系统工具截图；</li>
  <li>将截图存储到桌面或者随便什么地方；</li>
  <li>修改截图文件名；</li>
  <li>将截图放到octopress/source/images/….去；</li>
  <li>在文档中写上图片的Markdown标签，指向图片；</li>
</ol>

<p>在我no zuo no die的用了第三方网站做图床以后，又多了一步：</p>

<ul>
  <li>在图片Markdown标签中加上图床的url前缀；</li>
</ul>

<p>我擦……这事儿干下来基本上写文的一点儿激情就都烟消云散了……</p>

<p>这个写稿贴图的事儿最好可以简化成这样就爽到了：</p>

<ol>
  <li>随便找个玩意儿截图到剪贴板；</li>
  <li>按个快捷键把Markdown的Url给粘贴到正在写的文档中；</li>
</ol>

<p>恩，就这两步，剩下的恶心事儿最好都有人帮着做了就爽了……</p>

<p>网上搜了半天，没找到现成的东西%&gt;_&lt;%，难道大家都这么苦日子过着？？</p>

<p>好吧，发扬懒人改变世界的精神，自己动手丰衣足食吧……</p>

<p>先打开自己最爱的Alfred，新建一个Workflow（注意，必须是由Powerpack的版本哦~~）：</p>

<p>加个Hotkey的Triggers，写上自己熟悉的热键作为粘贴的热键使用：</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/e3840d6cc172bc918c5121ba9179ebc6.png" alt="" /></p>

<p>由于我直接用QQ截图，QQ热键是Ctrl+Cmd+A，所以就直接设置Ctrl+Cmd+V了……</p>

<p>接下来要加一个Actions，本来打算用NSAppleScript的，但是从AppleScript编辑器里粘过去的代码死活不work，没辙，改用<code>Run Script</code>的Action了。</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/b78a14c1c9864d77a24f49bccb451f78.png" alt="" /></p>

<p>双击Action，Language选择<code>/usr/bin/osascript</code>，把下面的代码粘贴到<code>Script</code>区域：</p>

<p>```applescript
property fileTypes : {¬
	{«class PNGf», “.png”}, ¬
	{JPEG picture, “.jpg”}}</p>

<p>on getType() –判断剪贴板中的数据类型，暂时只支持png和jpg，优先用png
	repeat with aType in fileTypes
		repeat with theInfo in (clipboard info)
			if (first item of theInfo) is equal to (first item of aType) then return aType
		end repeat
	end repeat
	return missing value
end getType</p>

<p>set theType to getType()</p>

<p>if theType is not missing value then
	set filePath to “/Users/viecks/Datas/Blog/octopress/source/images/attaches/” –这里换成你自己放置图片的路径
	set fileName to do shell script “date "+%Y%m%d%H%M%S" | md5” –用当前时间的md5值做文件名
	if fileName does not end with (second item of theType) then set fileName to (fileName &amp; second item of theType as text)
	set markdownUrl to “![](http://attaches-mirror.qiniudn.com/images/attaches/” &amp; fileName &amp; “)” –这里如果没有用到图床，就把前面前缀去掉，用到的话换成你自己图床的url
	set filePath to filePath &amp; fileName</p>

<pre><code>try
	set imageFile to (open for access filePath with write permission)
	set eof imageFile to 0
	write (the clipboard as (first item of theType)) to imageFile -- as whatever
	close access imageFile
	set the clipboard to markdownUrl
	try
		tell application "System Events"
			keystroke "v" using command down
		end tell
	end try
on error
	try
		close access imageFile
	end try
	return ""
end try else
return "" end if ```
</code></pre>

<p>然后把Triggers和Action之间牵个红线……</p>

<p>然后Ctrl+Cmd+A，Ctrl+Cmd+V，</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/6cbd5c0748c60b083cce5b273789ffdd.png" alt="" /></p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/7fe29cfc8f6451d4861c21743164a768.png" alt="" /></p>

<p>擦，很神奇的一个markdown的image标签就出现在你的编辑器里面了，文件也直接出现在你的图片目录里了，O(∩_∩)O，直接去deploy吧……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[暴力破解Alfred 2.3的Powerpack]]></title>
    <link href="http://viecks.info/blog/2014/05/13/bao-li-po-jie-alfred-2-dot-3de-powerpack/"/>
    <updated>2014-05-13T12:45:39+08:00</updated>
    <id>http://viecks.info/blog/2014/05/13/bao-li-po-jie-alfred-2-dot-3de-powerpack</id>
    <content type="html"><![CDATA[<p><strong style="color: red">免责声明：本文所述仅限于学习和研究之目的，请勿用于任何商业用途。是否使用本文所述技术取决与您，由此造成的一切后果本人不承担任何责任。</strong></p>

<p>今天收到了Alfred 2.3版本的AutoUpdate提醒。更新以后发现之前网上搜到的用于Alfred 2.x版本的破解补丁无法破解2.3版本了。没有办法，只能自己动手丰衣足食了……</p>

<!--more-->

<p>看下刚装完的Alfred 2.3，</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-4.png" alt="" /></p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-5.png" alt="" /></p>

<p>果然残疾了……</p>

<p>先尝试用之前的Patcher对2.3版本的Alfred打Patch：</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-1.png" alt="" /></p>

<p>擦，果然不Work了……</p>

<p>打开Alfred看下程序结构（在Alfred 2.app上右键显示包内容）：</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-2.png" alt="" /></p>

<p>看到有<code>Alfred Framework</code>、<code>Growl</code>、<code>Alfred 2</code>三个可执行程序以及<code>Alfred Preferences.app</code>一个应用程序。</p>

<p>再打开<code>Alfred Preferences.app</code>看看：</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-3.png" alt="" /></p>

<p>Ok，这里还有一个<code>Alfred Preferences</code>的可执行程序。</p>

<p>祭出神器Hopper，先打开<code>Alfred Preferences</code>看看。</p>

<p>先尝试找下提示需要注册Powerpack的字符串，在Strings里面搜索<code>Powerpack Required</code>:</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-6.png" alt="" /></p>

<p>找到了3个相关的字符串，定位到第一个，然后看Cross References：</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-7.png" alt="" /></p>

<p>有个字符串类型的东西引用到它，再对这个字符串类型的东西做Cross References：</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-8.png" alt="" /></p>

<p>(⊙o⊙)哦，有个函数引用了这个字符串，我们进去看看……</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-9.png" alt="" /></p>

<p>这里牛逼屌炸天的Hopper给我们提供了一个无比牛逼的功能，<code>Pseudo Code</code>，简单来说就是Hopper的HexRays，我们看下通过<code>Pseudo Code</code>得到的结果：</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-10.png" alt="" /></p>

<p>我擦，真的屌炸天，对于我等汇编苦手来说，简直就是圣母福音。</p>

<p>不废话了，从这里看，很明显，Alfred调用了函数<code>isNgiw32TGS4363Aa</code>来判断用户是否购买了Powerpack，如果这个函数不返回<em>0x0</em>，则认为已经购买。</p>

<p>看看这个函数的实现：</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-11.png" alt="" /></p>

<p>从代码上看，这里调用到得<code>isNgiw32TGS4363Aa</code>只是一个stub，真正的<code>isNgiw32TGS4363Aa</code>实现看来并不在这个可执行程序里。</p>

<p>先关掉这个<code>Alfred Preferences</code>，看看其他的程序中是否有<code>isNgiw32TGS4363Aa</code>的实现。</p>

<p>经过查找，发现<code>isNgiw32TGS4363Aa</code>是实现在<code>Alfred Framework</code>中的，我们用Hopper打开<code>Alfred Framework</code>，在Labels下面搜索<code>isNgiw32TGS4363Aa</code>：</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-12.png" alt="" /></p>

<p>Bingo，got it</p>

<p>从代码上看，这个函数进一步调用了一个名为<code>isAgi23tAGIe35SG</code>的函数，并将这个函数的结果作为返回值返回给上层。</p>

<p>有兴趣搞清楚Alfred判断Powerpack是否购买的流程的同学可以进一步看看<code>isAgi23tAGIe35SG</code>，不过对于我来说，到这一步已经够了，直接暴力修改这里的代码，使得这个函数永远返回<em>0x1</em>理论上就足够了。让我们搞搞试试：</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-13.png" alt="" /></p>

<p>修改完后，用Hopper的<code>Produce New Executable</code>保存修改后的<code>Alfred Framework</code>到桌面上。</p>

<p>用修改后的<code>Alfred Framework</code>替换Alfred 2.app中的文件，我们来试试修改是否生效：</p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-14.png" alt="" /></p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-17.png" alt="" /></p>

<p><img src="http://attaches-mirror.qiniudn.com/images/attaches/QQ20140513-16.png" alt="" /></p>

<p>貌似Work了……:D</p>
]]></content>
  </entry>
  
</feed>
